#!/bin/bash

# Upload a file to Apple's Notary service and staple upon success.

set -e;

function pure_version() {
	echo '1.0.0.2'
}

function version() {
	echo "notarizer $(pure_version)"
}

function usage() {
	version
	echo "Notarize and Staple a Mac App in a Zip Archive, Installer Package or DMG."
	echo ""
	echo "Usage:"
	echo "$(basename $0) -u username -p password [options] file"
	echo "$(basename $0) --get-providers -u username"
	echo "file will be uploaded to Apple's notary service and stapled on success."
	echo ""
	echo "Options:"
	echo " -u, --username username (required)"
	echo "   The username associated with your developer account"
	echo " -p, --password password"
	echo "   The password for the given username. You can use, for eample, @keychain:Notarizer to access a password stored in the login keychain with service name Notarizer."
	echo "   See https://support.apple.com/en-us/HT204397 for more info"
	echo " -i, --itc-provider itc_provider_id"
	echo "   The developer shortname to use (usually your App Store Connect id without spaces or '|'s)"
	echo "   Only required if you are a member of multiple Teams."
	echo "   See --get-providers for help finding your team shortname."
	echo " -s, --sign cerificatename"
	echo "   An optional cerificate for signing before notarization"
	echo " -n, --notify"
	echo "   If present, a dialog will be displayed on completion"
	echo " --get-providers"
	echo "   Request a listing of provider shortnames"
	echo " -h, --help"
	echo "   Show this message and exit"
	echo " -v, --version"
	echo "   Print version information and exit"
	exit 0
}

username=""
password=""
itc_string=""
providers=0
notify=0

while test "${1:0:1}" = "-"; do
	case $1 in
	-h | --help)
		usage; exit 0;;
	-v | --version)
		version; exit 0;;
	-u | --username)
		username="$2"
		shift; shift;;
	-p | --password)
		password="$2"
		shift; shift;;
	-i | --itc-provider)
		itc_string=" -itc_provider $2"
		shift; shift;;
	-s | --sign)
		certificate="$2"
		shift; shift;;
	-n | --notify)
		notify=1
		shift;;
	--get-providers)
		providers=1
		shift;;
	-*)
		echo "Unknown option $1. Run with --help for help."
		exit 1;;
	esac
done

if [ $providers == 1 ]; then
	echo "getting providers. Enter your app-specific password when prompted."
	"$(xcode-select -p)"/../Applications/Application\ Loader.app/Contents/itms/bin/iTMSTransporter -v off -m provider -u ${username} -p
	exit 0
fi

test -z "$1" && {
	echo "Not enough arguments. Invoke with --help for help."
	exit 1
}

file_path="$1"

if ! test -z "$certificate"; then
	echo "Codesigning ${file_path}"
	if codesign --timestamp --options runtime -s "${certificate}" "${file_path}"; then
	codesign -vvv "${file_path}"
	fi
fi

echo "Uploading to notarization service (this could take some time)"

if test -z "$password"; then
	echo -n "Password for ${username}: "
	read -s password
	echo
fi

bundle_id=$(uuidgen)

upload_command="xcrun altool --notarize-app --primary-bundle-id ${bundle_id} --username ${username} --password ${password} --file ${file_path}${itc_string} 2>&1"
echo
echo $upload_command
echo

if ! upload_response=$($upload_command) ;then
	echo "${upload_response}"
fi

req_uuid=$(echo "${upload_response}" | awk '/RequestUUID/{print $3}')

if test -z "$req_uuid"; then
	echo "Upload failed"
	exit 1
else
	echo "Got RequestUUID ${req_uuid}"
fi

	echo -n "Waiting..."

while true; do
	progress=$(xcrun altool --notarization-info "${req_uuid}"  --username "${username}" --password "${password}" 2>&1 | grep Status: | awk '{print $2}')
	case $progress in
		
		success)
			echo ""
			echo "Notarize complete. Stapling"
			xcrun stapler staple -q "${file_path}"
			if xcrun stapler validate -q "${file_path}"; then
				echo "Staple succeeded"
				if [ $notify == 1 ]; then
					osascript -e "display dialog \"${file_path} Notarized and Stapled Successfully!\" buttons {\"OK\"} default button 1 with title \"File Notarized and Stapled\""
				fi
			else
				if [ $notify == 1 ]; then
					osascript -e "display dialog \"An Error occurred stapling and validating.\" buttons {\"OK\"} default button 1 with title \"Error\""
				fi
				xcrun stapler validate -v "${file_path}" #To hopefully find out what went wrong
			fi
			break
			;;			
		in)  #in progress
			echo -n "..."
			;;
		*)
			echo ""
			echo "An error occurred during Notarization. Status=${progress}"
			exit 1
			;;
	esac
	sleep 15
done

echo ""
echo "Finished"
exit 0
